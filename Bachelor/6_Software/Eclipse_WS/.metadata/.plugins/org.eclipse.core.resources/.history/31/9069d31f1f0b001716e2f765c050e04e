/**
 * @file	CEdgeBalanceAction.cpp
 * @author	Michael Meindl
 * @date	15.03.2017
 * @brief	Method definitions for CEdgeBalanceAction.
 */
#include "CEdgeBalanceAction.h"
#include <iostream>

CEdgeBalanceAction::CEdgeBalanceAction() : mLQG("/root/control_config/1D_K_mat.csv",
											    "/root/control_config/1D_L_mat.csv",
												"/root/control_config/1D_A_mat.csv",
												"/root/control_config/1D_B_mat.csv",
												"/root/control_config/1D_C_mat.csv"),
										   mTime(0.0F),
										   mLQRFlag(true)
{

}
void CEdgeBalanceAction::sampleIdle()
{
	CSensorData sensor_data;
	if(sHardware.fetchSensorData(sensor_data))
	{
		mSignalFlow.calcOutput(sensor_data);
		TRVector<3U> x = mSignalFlow.C1DOffsetCorrection::getValue();
		TRVector<1U> u = mSignalFlow.TLQR<3U, 1U>::getValue();
		x = mXLPF.calcOutput(x);
		TRVector<4U> data;
		data.scalarAt(1U, 1U) = x.scalarAt(1U, 1U);
		data.scalarAt(2U, 1U) = x.scalarAt(2U, 1U);
		data.scalarAt(3U, 1U) = x.scalarAt(3U, 1U);
		data.scalarAt(4U, 1U) = u.scalarAt(1U, 1U);

		sProxy.transmitLQRData1D(data, false);
	}
}
bool CEdgeBalanceAction::inControlArea()
{
	TRVector<3U> x = mSignalFlow.C1DCompFilter::getValue();
	Float32 x_g    = x.scalarAt(1,1);
	x_g			   = x_g > 0.0F ? x_g : -x_g;
	return x_g < sMaxGValue;
}
void CEdgeBalanceAction::sampleControl()
{
	CSensorData sensor_data;
	if(sHardware.fetchSensorData(sensor_data))
	{
	    mSignalFlow.calcOutput(sensor_data);
	    TRVector<3U> x = mSignalFlow.C1DCompFilter::getValue();
		TRVector<1U> u = mSignalFlow.TLQR<3U, 1U>::getValue();
		TRVector<4U> data;
		data.scalarAt(1U, 1U) = x.scalarAt(1U, 1U);
		data.scalarAt(2U, 1U) = x.scalarAt(2U, 1U);
		data.scalarAt(3U, 1U) = x.scalarAt(3U, 1U);
		data.scalarAt(4U, 1U) = u.scalarAt(1U, 1U);

		sProxy.transmitLQRData1D(data, false);

		mLQG.calculateOutput(x.scalarAt(1,1), x.scalarAt(2,1), x.scalarAt(3,1));


		CTorqueData tm;
		tm.mTorque1 = 0.0F; tm.mTorque2 = u.scalarAt(1U, 1U); tm.mTorque3 = 0.0F;
		sHardware.setTorque(tm);
	}
}
void CEdgeBalanceAction::onEntryEdgeBalance()
{
	std::cout << "[*] Control-Comp: Entering Edge-Balance" << std::endl;
}
void CEdgeBalanceAction::onExitEdgeBalance()
{
	std::cout << "[*] Control-Comp: Exiting Edge-Balance" << std::endl;
}
void CEdgeBalanceAction::onEntryIdle()
{
	std::cout << "[*] Control-Comp: Entering Idle" << std::endl;
}
void CEdgeBalanceAction::onExitIdle()
{
	std::cout << "[*] Control-Comp: Exiting Idle" << std::endl;
}
void CEdgeBalanceAction::onEntryControl()
{
	std::cout << "[*] Control-Comp: Entering Control" << std::endl;
	sHardware.enableMotor();
}
void CEdgeBalanceAction::onExitControl()
{
	std::cout << "[*] Control-Comp: Exiting Control" << std::endl;
	sHardware.disableMotor();
}
void CEdgeBalanceAction::setOffsetCorrectionFlag(bool flag)
{
	mSignalFlow.C1DOffsetCorrection::setActiveFlag(flag);
}
