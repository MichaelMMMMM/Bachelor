/**
 * @file	TSaturation.h
 * @author	Michael Meindl
 * @date	19.04.2017
 * @brief	Template class to saturate a n-dimensional signal.
 */
#ifndef TSATURATION_H
#define TSATURATION_H
#include "TMatrix.h"

template<const UInt32 n>
class TSaturation
{
public:
	using InputType		= TRVector<n>;
	using OutputType	= TRVector<n>;
public:
	const OutputType& calcOutput(const InputType& input);
	const OutputType& getValue() const;
	void setMaximum(Float32 max);
	void setMinimum(Float32 min);
public:
	TSaturation();
	TSaturation(const TSaturation&) = delete;
	TSaturation& operator=(const TSaturation&) = delete;
	~TSaturation() = default;
private:
	OutputType mOutput;
	Float32	   mMax;
	Float32    mMin;
};

template<const UInt32 n>
TSaturation<n>::TSaturation() : mMax(0.0F), mMin(0.0F)
{

}
template<const UInt32 n>
const typename TSaturation<n>::OutputType& TSaturation<n>::calcOutput(const typename TSaturation<n>::InputType& input)
{
	auto copy = input;
	for(UInt32 k = 0U; k < n; k++)
	{
		mOutput[k][1] = copy[k][1] > mMax ? mMax : copy[k][1];
		mOutput[k][1] = copy[k][1] < mMin ? mMin : copy[k][1];
	}
	return mOutput;
}

#endif
