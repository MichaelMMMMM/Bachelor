/**
 * @file	CStateEstimate.h
 * @author	Michael Meindl
 * @date	16.02.2017
 * @brief	Class to calculate the state estimates from the sensor values.
 */
#ifndef CSTATEESTIMATE_H
#define CSTATEESTIMATE_H
#include "CPoly1.h"
#include "CStateData.h"
#include "CSensorData.h"

class CStateEstimate
{
public:
	using InputType  = CSensorData;
	using OutputType = CStateData;
public:
	const CStateData& calculateOutput(const CSensorData& input);
	const CStateData& getOutput();
public:
	CStateEstimate();
	CStateEstimate(const CStateEstimate&) = delete;
	CStateEstimate& operator=(const CStateEstimate&) = delete;
	~CStateEstimate() = default;
private:
	void calculateG(const CSensorData& input);
	void calculateUK(const CSensorData& input);
	void calculateUR(const CSensorData& input);
private:
	CStateData mOutput;

	CPoly1 mA_X_PolyArr[6];
	CPoly1 mA_Y_PolyArr[6];
	CPoly1 mW_X_PolyArr[6];
	CPoly1 mW_Y_PolyArr[6];
	CPoly1 mW_Z_PolyArr[6];
	CPoly1 mADC_PolyArr[3];

	//G coefficients to eliminate acceleration summands
	static constexpr Float32 sB1[] = { 1.1569F, 0.1192F, -2.0736F, 1.0F };
	static constexpr Float32 sB2[] = { -17.3974F, 8.3898F, 9.7058F, 1.0F };
	static constexpr Float32 sB3[] = { 1.0F, 2.0F, 3.0F, 4.0F };
	//Accelerometer coefficients
	static constexpr Float32 sA_X1_P1 = 0.0005931F;
	static constexpr Float32 sA_X1_P2 = -0.3145;
	static constexpr Float32 sA_X2_P1 = 0.0005944F;
	static constexpr Float32 sA_X2_P2 = -0.2634F;
	static constexpr Float32 sA_X3_P1 = 0.0005942F;
	static constexpr Float32 sA_X3_P2 = -0.1991F;
	static constexpr Float32 sA_X4_P1 = 0.000604F;
	static constexpr Float32 sA_X4_P2 = -0.06702F;
	static constexpr Float32 sA_X5_P1 = 0.0005983F;
	static constexpr Float32 sA_X5_P2 = -0.1744F;
	static constexpr Float32 sA_X6_P1 = 0.0005952F;
	static constexpr Float32 sA_X6_P2 = -0.1953F;
	static constexpr Float32 sA_Y1_P1 = 0.0005999F;
	static constexpr Float32 sA_Y1_P2 = -0.06285F;
	static constexpr Float32 sA_Y2_P1 = 0.0005974F;
	static constexpr Float32 sA_Y2_P2 = 0.05025F;
	static constexpr Float32 sA_Y3_P1 = 0.0006011F;
	static constexpr Float32 sA_Y3_P2 = -0.05404F;
	static constexpr Float32 sA_Y4_P1 = 0.0005926F;
	static constexpr Float32 sA_Y4_P2 = -0.2692F;
	static constexpr Float32 sA_Y5_P1 = 0.0005989F;
	static constexpr Float32 sA_Y5_P2 = -0.007797F;
	static constexpr Float32 sA_Y6_P1 = 0.0006033F;
	static constexpr Float32 sA_Y6_P2 = 0.03603F;
	//Gyroscope coefficients
	static constexpr Float32 sW_P1    = 0.00013316F;
	static constexpr Float32 sW_X1_P2 = 0.0079F;
	static constexpr Float32 sW_Y1_P2 = -0.0171F;
	static constexpr Float32 sW_Z1_P2 = -0.0006F;
	static constexpr Float32 sW_X2_P2 = 0.0311F;
	static constexpr Float32 sW_Y2_P2 = -0.0278F;
	static constexpr Float32 sW_Z2_P2 = 0.0019F;
	static constexpr Float32 sW_X3_P2 = 0.0073F;
	static constexpr Float32 sW_Y3_P2 = -0.0263F;
	static constexpr Float32 sW_Z3_P2 = -0.0125F;
	static constexpr Float32 sW_X4_P2 = -0.0038F;
	static constexpr Float32 sW_Y4_P2 = -0.0109F;
	static constexpr Float32 sW_Z4_P2 = 0.0141F;
	static constexpr Float32 sW_X5_P2 = 0.0106F;
	static constexpr Float32 sW_Y5_P2 = -0.0115F;
	static constexpr Float32 sW_Z5_P2 = -0.0245F;
	static constexpr Float32 sW_X6_P2 = -0.0002F;
	static constexpr Float32 sW_Y6_P2 = -0.0160F;
	static constexpr Float32 sW_Z6_P2 = -0.0140F;
	//ADC coefficients
	static constexpr Float32 sADC1_P1 = -0.2043F;
	static constexpr Float32 sADC1_P2 = 416.3F;
	static constexpr Float32 sADC2_P1 = -0.2044F;
	static constexpr Float32 sADC2_P2 = 416.0F;
	static constexpr Float32 sADC3_P1 = -0.2044F;
	static constexpr Float32 sADC3_P2 = 416.7F;
};

#endif
