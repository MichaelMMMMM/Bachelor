/**
 * @file	CEdgeBalanceAction.cpp
 * @author	Michael Meindl
 * @date	15.03.2017
 * @brief	Method definitions for CEdgeBalanceAction.
 */
#include "CEdgeBalanceAction.h"
#include <iostream>

CEdgeBalanceAction::CEdgeBalanceAction() : mTime(0.0F)
{

}
void CEdgeBalanceAction::sampleIdle()
{
	CSensorData sensor_data;
	if(sHardware.fetchSensorData(sensor_data))
	{
		mSignalFlow.calcOutput(sensor_data);
	}
}
bool CEdgeBalanceAction::inControlArea()
{
	TRVector<3U> x = mSignalFlow.C1DCompFilter::getValue();
	Float32 x_g    = x.scalarAt(1,1);
	x_g			   = x_g > 0.0F ? x_g : -x_g;
	return x_g < sMaxGValue;
}
void CEdgeBalanceAction::sampleControl()
{
	CSensorData sensor_data;
	if(sHardware.fetchSensorData(sensor_data))
	{
	    mSignalFlow.calcOutput(sensor_data);
		TRVector<1U> u = mSignalFlow.Controller::getValue();
		CTorqueData tm;
		tm.mTorque1    = u.scalarAt(1U,1U);
	}
}
void CEdgeBalanceAction::onEntryEdgeBalance()
{
	std::cout << "[*] Control-Comp: Entering Edge-Balance" << std::endl;
}
void CEdgeBalanceAction::onExitEdgeBalance()
{
	std::cout << "[*] Control-Comp: Exiting Edge-Balance" << std::endl;
}
void CEdgeBalanceAction::onEntryIdle()
{
	std::cout << "[*] Control-Comp: Entering Idle" << std::endl;
}
void CEdgeBalanceAction::onExitIdle()
{
	std::cout << "[*] Control-Comp: Exiting Idle" << std::endl;
}
void CEdgeBalanceAction::onEntryControl()
{
	std::cout << "[*] Control-Comp: Entering Control" << std::endl;
	sHardware.enableMotor();
}
void CEdgeBalanceAction::onExitControl()
{
	std::cout << "[*] Control-Comp: Exiting Control" << std::endl;
	sHardware.disableMotor();
}
