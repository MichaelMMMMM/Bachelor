/**
 * @file	CCompFilter.cpp
 * @author	Michael Meindl
 * @date	16.02.2017
 * @brief	Method definitions for CCompFilter.
 */
#include "CCompFilter.h"

CCompFilter::CCompFilter() : mFirstRun(true)
{

}
const CStateData& CCompFilter::calcOutput(const CStateData& input)
{
	if(mFirstRun == true)
	{
		mOutput = input;
	}
	else
	{
		Float32& g1 = input.mGData.mG_k1;
		Float32& g2 = input.mGData.mG_k2;
		Float32& g3 = input.mGData.mG_k3;

		Float32& w1 = input.mUKData.mUK_k1;
		Float32& w2 = input.mUKData.mUK_k2;
		Float32& w3 = input.mUKData.mUK_k3;

		Float32 g__d[] = {0.0F, 0.0F, 0.0F};
		g__d[0] = g2*w3-g3*w2;
		g__d[1] = g3*w1-w3*g1;
		g__d[2] = g1*w2-g2*w1;

		mOutput.mGData.mG_k1 = sAlpha*(mOutput.mGData.mG_k1 + 0.02F*g__d[0])+(1-sAlpha)*g1;
		mOutput.mGData.mG_k2 = sAlpha*(mOutput.mGData.mG_k2 + 0.02F*g__d[1])+(1-sAlpha)*g2;
		mOutput.mGData.mG_k3 = sAlpha*(mOutput.mGData.mG_k3 + 0.02F*g__d[2])+(1-sAlpha)*g3;
		mOutput.mUKData      = input.mUKData;
		mOutput.mURData		 = input.mURData;

	}
	return mOutput;
}
const CStateData& CCompFilter::getValue()
{
	return mOutput;
}
