#include "CADC.h"
#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <unistd.h>
#include <stdio.h>
#include <fcntl.h>
#include <sys/mman.h>
#include "Global.h"

CADC::CADC() : mMemoryFD(-1), mAddrPtr(nullptr)
{
	mMemoryFD = open("/dev/mem", O_RDWR);
	sAssertion(mMemoryFD >= 0, "(CSPI::CSPI) Failed to open /dev/mem", true);
	mAddrPtr = reinterpret_cast<UInt8*>(mmap(0, sMEM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, mMemoryFD, sSTART_ADDR));
	//sAssertion(reinterpret_cast<void*>(mAddrPtr) != MAP_FAILED, "(SPI::CSPI) Failed to mmap", true);

	UInt32 stepConfig = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPENABLE_Offset);
	std::cout << stepConfig << std::endl;
	UInt32 step1config = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPCONFIG1_Offset);
	UInt32 step1delay  = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPDELAY1_Offset);
	UInt32 step2config = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPCONFIG2_Offset);
	UInt32 step2delay  = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPDELAY2_Offset);
	UInt32 step3config = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPCONFIG3_Offset);
	UInt32 step3delay  = *reinterpret_cast<UInt32*>(mAddrPtr + sSTEPDELAY3_Offset);

}
CADC::~CADC()
{

}
